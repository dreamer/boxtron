#!/usr/bin/env python3

# pylint: disable=missing-docstring

import argparse
import os
import subprocess
import sys

import confgen
import midi
import version
import toolbox

from toolbox import print_err
from settings import SETTINGS as settings
from tweaks import TWEAKS_DB, tweak_command

STEAM_APP_ID = os.environ.get('SteamAppId')

PID_FILE = '/tmp/steam_dos_{0}'.format(STEAM_APP_ID)

RUN_EXE = os.environ.get('SDOS_RUN_EXE')


def wait_for_previous_process():
    if not STEAM_APP_ID:
        return
    pid = 0
    try:
        with open(PID_FILE, 'r') as pid_file:
            pid = int(pid_file.read())
    except FileNotFoundError:
        pass
    if pid and os.path.isfile('/proc/{0}/cmdline'.format(pid)):
        print_err('run_dosbox: waiting for process {0} to '.format(pid),
                  'stop and delete file {0}'.format(PID_FILE))
        subprocess.call(['inotifywait', '-e', 'delete', PID_FILE])


# TODO rewrite this as __enter__, __exit__ to be used in 'with' statement
def create_pid_file():
    if not STEAM_APP_ID:
        return
    with open(PID_FILE, 'w') as pid_file:
        pid_file.write(str(os.getpid()))


def cleanup_pid_file():
    if not STEAM_APP_ID:
        return
    try:
        os.remove(PID_FILE)
    except FileNotFoundError:
        pass


def configure_midi():
    """Detect or run and configure software MIDI synthesiser."""
    if not settings.get_midi_on():
        return

    if midi.detect_software_synthesiser(r'timidity|fluid'):
        # Synthesiser is already running (maybe as a service).
        # There's no reason to start our own.
        return

    sfont = settings.get_midi_soundfont()
    if toolbox.which('timidity'):
        midi.start_timidity(sfont)
    elif toolbox.which('fluidsynth'):
        midi.start_fluidsynth(sfont)
    else:
        print_err('steam-dos: warn: no software MIDI synthesiser available')


def run_dosbox(args):
    create_pid_file()
    print_err('run_dosbox:', ['dosbox'] + args)
    sys.stderr.flush()
    subprocess.call(['dosbox'] + args)
    cleanup_pid_file()


def run_dosbox_with_conf(args):
    name = confgen.uniq_conf_name(STEAM_APP_ID, args)
    if settings.get_confgen_force() or not os.path.isfile(name):
        print_err('run_dosbox: generating {0} based on {1}'.format(
            name, args))
        confgen.create_conf_file(name, args)
    configure_midi()
    run_dosbox(['-conf', name, '-conf', confgen.create_audio_conf()])


def run(cmd_line, wait=False):

    if wait:
        wait_for_previous_process()

    _folder, exe = os.path.split(cmd_line[0]) if cmd_line else (None, '')

    if exe == 'iscriptevaluator.exe':
        print_err('run_dosbox: skipping Steam script:', cmd_line)

    elif RUN_EXE:
        # User wants to run different executable than the one
        # selected by Steam (e.g. sound setup).
        exe = RUN_EXE
        configure_midi()
        if os.path.isfile(exe):
            run_dosbox(['-conf', confgen.create_audio_conf(), exe, '-exit'])
        else:
            exe_path = os.path.join(os.getcwd(), exe)
            run_dosbox(['-conf', confgen.create_audio_conf(),
                        '-c', '@echo File not found: {0}'.format(exe_path)])

    elif STEAM_APP_ID in TWEAKS_DB:
        # If AppId is included in known tweaks, then modify command line
        # before handing it over to .conf generator:
        print_err('run_dosbox: tweaking command for app ',
                  '{0}'.format(STEAM_APP_ID))
        tweaked_cmd = tweak_command(STEAM_APP_ID, cmd_line)
        if not tweaked_cmd:
            sys.exit(1)
        run_dosbox_with_conf(tweaked_cmd)

    elif STEAM_APP_ID and exe.lower() == 'dosbox.exe':
        # When dosbox with parameters is called, use them to
        # generate new .conf file.  When dosbox without parameters
        # is called, it implies: -conf dosbox.conf
        dosbox_args = cmd_line[1:] or ['-conf', 'dosbox.conf']
        run_dosbox_with_conf(dosbox_args)

    elif STEAM_APP_ID and toolbox.is_trivial_batch(exe):
        # Publisher uploaded a .bat file to run dosbox
        dosbox_args = toolbox.read_trivial_batch(exe)
        run_dosbox_with_conf(dosbox_args)

    elif STEAM_APP_ID and os.path.isfile('dosbox.conf'):
        # Executable is unrecognised, but at least there's a dosbox.conf
        # let's pretend it was passed to dosbox.exe:
        run_dosbox_with_conf(['-conf', 'dosbox.conf'])

    else:
        print_err('run_dosbox: ignoring command:', cmd_line)


def main():
    parser = argparse.ArgumentParser()
    group = parser.add_mutually_exclusive_group()
    group.add_argument('--get-native-path', action='store_true')
    group.add_argument('--get-compat-path', action='store_true')
    group.add_argument('--wait-before-run', action='store_true')
    group.add_argument('--version', action='store_true')
    group.add_argument('--get-current-step')
    args, run_cmd_line = parser.parse_known_args()

    if args.version:
        print('steam-dos version {0}'.format(version.VERSION[1:]))
        sys.exit(0)
    if args.get_native_path:
        # TODO convert single path: Windows -> Linux
        sys.exit(1)
    elif args.get_compat_path:
        # TODO convert single path: Linux -> Windows
        sys.exit(1)
    elif args.get_current_step:
        # Steam sometimes invokes this even when it's not defined in
        # toolmanifestâ€¦
        sys.exit(1)
    else:
        run(run_cmd_line, wait=args.wait_before_run)


if __name__ == "__main__":
    main()
