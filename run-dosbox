#!/usr/bin/env python3

# pylint: disable=invalid-name
# pylint: disable=missing-docstring

# Copyright (C) 2019  Patryk Obara <patryk.obara@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import argparse
import os
import subprocess
import sys

import confgen
import midi
import preconfig
import tweaks
import version
import toolbox

from toolbox import print_err
from settings import SETTINGS as settings
from fsl import SierraLauncherConfig

STEAM_APP_ID = os.environ.get('SteamAppId', '0')

PID_FILE = '/tmp/steam_dos_{0}'.format(STEAM_APP_ID)

RUN_EXE = os.environ.get('SDOS_RUN_EXE')


def wait_for_previous_process():
    pid = 0
    try:
        with open(PID_FILE, 'r') as pid_file:
            pid = int(pid_file.read())
    except FileNotFoundError:
        pass
    if pid and os.path.isfile('/proc/{0}/cmdline'.format(pid)):
        print_err('run_dosbox: waiting for process', pid, 'to stop',
                  'and delete file', PID_FILE)
        subprocess.call(['inotifywait', '-e', 'delete', PID_FILE])


def setup_midi():
    """Handle whole MIDI setup based on user preference."""
    midi_preset = tweaks.get_midi_preset(STEAM_APP_ID)
    if midi_preset == 'auto':
        setup_midi_game()
    if midi_preset == 'disable':
        print_err('steam-dos: info: this game does not support MIDI music')
        settings.set_midi_on(False)
    setup_midi_synth()


def setup_midi_synth():
    """Detect or run and configure software MIDI synthesiser."""
    if not settings.get_midi_on():
        return

    if midi.detect_software_synthesiser(r'timidity|fluid'):
        # Synthesiser is already running (maybe as a service).
        # There's no reason to start our own.
        return

    tool = settings.get_midi_tool()
    sfont = settings.get_midi_soundfont()

    preference_list = []
    if tool == 'timidity':
        preference_list = ['timidity', 'fluidsynth']
    elif tool == 'fluidsynth':
        preference_list = ['fluidsynth', 'timidity']

    for tool in preference_list:
        if not toolbox.which(tool):
            continue
        if tool == 'timidity':
            midi.start_timidity(sfont)
            return
        if tool == 'fluidsynth':
            midi.start_fluidsynth(sfont)
            return
    print_err('steam-dos: warn: no software MIDI synthesiser available')


def setup_midi_game():
    """Configure game to use (or not) MIDI."""

    if not preconfig.verify():
        print_err('steam-dos: error: checksum on resource file failed')
        return

    rfile_name = preconfig.find_resource_file()
    print_err('steam-dos: using resource file', rfile_name)
    with preconfig.open_resource(rfile_name) as rfile:
        if not rfile.includes(STEAM_APP_ID):
            print_err('steam-dos: error: resource file does not include',
                      'files for', STEAM_APP_ID)
            return
        x = 'on' if settings.get_midi_on() else 'off'
        print_err('steam-dos: turning MIDI {} for {}'.format(x, STEAM_APP_ID))
        rfile.extract(STEAM_APP_ID, 'midi_' + x)
        rfile.apply_rpatch(STEAM_APP_ID, 'midi_' + x)


def run_dosbox(args):
    cmd = settings.get_dosbox_cmd()
    print_err('steam-dos: working dir: "{}"'.format(os.getcwd()))
    install_dir = toolbox.guess_game_install_dir()
    if install_dir:
        cmd = [x.replace('%install_dir%', install_dir) for x in cmd]
    else:
        print_err('steam-dos: warning: unrecognized installation directory')
    print_err('steam-dos:', cmd + args)
    sys.stderr.flush()
    with toolbox.PidFile(PID_FILE):
        try:
            subprocess.call(cmd + args)
        except FileNotFoundError as err:
            print_err('steam-dos: error:', err)


def run_dosbox_with_conf(args):
    confgen.cleanup_old_conf_files(STEAM_APP_ID, args)
    name = confgen.uniq_conf_name(STEAM_APP_ID, args)
    tweaked_conf = tweaks.get_conf_tweak(STEAM_APP_ID)
    static_conf = confgen.create_dosbox_configuration(args, tweaked_conf)
    if settings.get_confgen_force() or not os.path.isfile(name):
        print_err('steam-dos: saving', name, 'based on', args)
        confgen.create_user_conf_file(name, static_conf, args)
    setup_midi()
    auto_conf = confgen.create_auto_conf_file(static_conf)
    run_dosbox(['-conf', auto_conf, '-conf', name])


def run(cmd_line, wait=False):
    print_err('steam-dos: working dir: "{}"'.format(os.getcwd()))
    print_err('steam-dos: original command:', cmd_line)

    if wait:
        wait_for_previous_process()

    exe_path, exe = os.path.split(cmd_line[0]) if cmd_line else (None, '')

    if exe == 'iscriptevaluator.exe':
        print_err('run_dosbox: skipping Steam script:', cmd_line)
        return

    chdir_tweak_needed, path = tweaks.check_cwd(cmd_line)
    if chdir_tweak_needed:
        if path:
            print_err('run_dosbox: warning: game not found in', os.getcwd())
            print_err('run_dosbox: warning: changing working dir to', path)
            os.chdir(path)
        else:
            print_err("run_dosbox: error: can't figure out what to do with",
                      "this command:")
            sys.exit(2)

    if tweaks.install_tweak_needed(STEAM_APP_ID):
        tweaks.install(STEAM_APP_ID)

    run_file(exe_path, exe, cmd_line)


def run_file(path, exe, cmd_line):

    if RUN_EXE:
        # User wants to run different executable than the one
        # selected by Steam (e.g. sound setup).
        exe = RUN_EXE
        setup_midi()
        if os.path.isfile(exe):
            run_dosbox_with_conf([exe, '-exit'])
        else:
            exe_path = os.path.join(os.getcwd(), exe)
            msg = 'File not found: ' + exe_path
            run_dosbox(['-conf', confgen.create_auto_conf_file({}),
                        '-c', '@echo ' + msg])  # yapf: disable

    elif tweaks.command_tweak_needed(STEAM_APP_ID):
        # If AppId is included in known tweaks, then modify command line
        # before handing it over to .conf generator:
        print_err('run_dosbox: tweaking command for app', STEAM_APP_ID)
        tweaked_cmd = tweaks.tweak_command(STEAM_APP_ID, cmd_line)
        if not tweaked_cmd:
            sys.exit(1)
        run_dosbox_with_conf(tweaked_cmd)

    elif exe.lower() == 'dosbox.exe':
        # When dosbox with parameters is called, use them to
        # generate new .conf file.  When dosbox without parameters
        # is called, it implies: -conf dosbox.conf
        dosbox_args = cmd_line[1:] or ['-conf', 'dosbox.conf']
        run_dosbox_with_conf(dosbox_args)

    elif toolbox.is_trivial_batch(exe):
        # Publisher uploaded a .bat file to run dosbox
        new_path, dosbox_args = toolbox.read_trivial_batch(exe)
        if new_path:
            os.chdir(new_path)
        run_dosbox_with_conf(dosbox_args)

    elif os.path.isfile('dosbox.conf'):
        # Executable is unrecognised, but at least there's a dosbox.conf
        # let's pretend it was passed to dosbox.exe:
        run_dosbox_with_conf(['-conf', 'dosbox.conf'])

    elif exe.lower() == 'sierralauncher.exe':
        # A lot of games owned by Activision use Sierra Launcher
        # instead of running the DOSBox directly.
        ini_file = os.path.join(path, 'SierraLauncher.ini')
        if not os.path.isfile(ini_file):
            print_err('run_dosbox: Sierra Launcher configuration file missing')
            sys.exit(1)
        print_err('steam-dos: parsing', ini_file)
        launcher = SierraLauncherConfig(ini_file=ini_file)
        print_err('steam-dos: launching', launcher.get_name())
        launcher.chdir()
        run_dosbox_with_conf(launcher.get_args())

    else:
        print_err('run_dosbox: ignoring command:', cmd_line)


def main():
    parser = argparse.ArgumentParser()
    group = parser.add_mutually_exclusive_group()
    group.add_argument('--get-native-path', action='store_true')
    group.add_argument('--get-compat-path', action='store_true')
    group.add_argument('--wait-before-run', action='store_true')
    group.add_argument('--version', action='store_true')
    group.add_argument('--get-current-step')
    args, run_cmd_line = parser.parse_known_args()

    if args.version:
        print('steam-dos version {0}'.format(version.VERSION[1:]))
        sys.exit(0)
    if args.get_native_path:
        # TODO convert single path: Windows -> Linux
        sys.exit(1)
    elif args.get_compat_path:
        # TODO convert single path: Linux -> Windows
        sys.exit(1)
    elif args.get_current_step:
        # Steam sometimes invokes this even when it's not defined in
        # toolmanifestâ€¦
        sys.exit(1)
    else:
        settings.setup()
        run(run_cmd_line, wait=args.wait_before_run)


if __name__ == "__main__":
    main()
